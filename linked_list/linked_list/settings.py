"""
Django settings for linked_list project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from celery.schedules import crontab
from misc import configuration

# Setup config
_config = {}
configuration.load_files_from_shell(_config, configuration.generic_adapter)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = _config.get('server.secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _config.get('server.debug', False)

ALLOWED_HOSTS = _config.get('server.allowed_hosts', [])


# Application definition

INSTALLED_APPS = [
    'author.apps.AuthorConfig',
    'link.apps.LinkConfig',
    'material.apps.MaterialConfig',
    'publisher.apps.PublisherConfig',
    'user.apps.UserConfig',
    'website.apps.WebsiteConfig',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
]

ROOT_URLCONF = 'linked_list.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
         ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'linked_list.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.' + _config.get('database.engine',
            'sqlite3'),
        'NAME': _config.get('database.name', os.path.join(BASE_DIR,
            'db.sqlite3')),
        'HOST': _config.get('database.host'),
        'USER': _config.get('database.username'),
        'PASSWORD': _config.get('database.password'),
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '%s:%s' % (
                os.environ.get('MEMCACHED_LISTEN', '127.0.0.1'),
                os.environ.get('MEMCACHED_PORT', 11211)),
    },
    'persistent': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://%s:%s/0' % (
                os.environ.get('REDIS_LISTEN', '127.0.0.1'),
                os.environ.get('REDIS_PORT', 6379)),
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': _config.get('logging.level', 'INFO'),
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # pylint:disable=line-too-long
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # pylint:disable=line-too-long
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # pylint:disable=line-too-long
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # pylint:disable=line-too-long
    },
]

LOGIN_URL = "/account/login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/assets/'
STATIC_ROOT = os.path.join(os.environ['ROOT_DIR'], 'public', 'assets')
MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(os.environ['ROOT_DIR'], 'var', 'uploads')


## AllAuth

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
}

FORM_DATA_UPLOAD_DIR = os.path.join(os.environ['ROOT_DIR'], 'var/form_data')

CELERY_BROKER_URL = 'redis://%s:%s' % (
        os.environ.get('REDIS_LISTEN', '127.0.0.1'),
        os.environ.get('REDIS_PORT', '6379'))
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_BEAT_SCHEDULE = {
    'cleanup-formdata-uploads': {
        'task': 'website.tasks.cleanup_formdata_uploads',
        'schedule': crontab(minute=0, hour=0),
        'args': (),
    }
}
